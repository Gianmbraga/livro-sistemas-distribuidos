Resumo Sistemas distribuídos 
Resumo abaixo aborda diversos temas feitos por Gian e Lucca
Resumo do capítulo 3 do livro para a turma: Comunicação entre Processos
OBESEVAÇÃO IMPORTANTE: O CONTEÚDO FOI FEITO NO GOOGLE DOCS ORIGINALMENTE E DEPOIS PASSADO PARA CA, LOGO PODE HAVER DIVERSOS ERRROS DE FORMATAÇÃO ABAIXO.

SUJEITO A ALGUMAS MUDANÇAS CONFORME O ESTUDOS SÃO FEITOS DURANTE O PROCESSO.

Modelo de Mensagens (Message Passing):
Envio e Recebimento de Mensagens: Processos trocam mensagens explícitas. Essa abordagem é utilizada em sistemas como MPI (Message Passing Interface) e pode ser síncrona ou assíncrona.
Filas de Mensagens: Mensagens podem ser armazenadas em filas até que o destinatário esteja pronto para processá-las, facilitando a comunicação assíncrona.
Chamadas de Procedimento Remoto (RPC):
Chamada de Funções Remotas: Processos podem invocar procedimentos em máquinas remotas como se fossem chamadas locais. Isso simplifica a comunicação, abstraindo a complexidade da rede.
Transparência: RPCs podem ser projetadas para serem transparentes, ocultando detalhes de localização e comunicação da rede dos programadores.
Invocação de Métodos Remotos (RMI):
Objetos Distribuídos: Similar ao RPC, mas orientado a objetos. Permite que métodos em objetos remotos sejam invocados.
Desenvolvimento Orientado a Objetos: Facilita a construção de sistemas distribuídos baseados em paradigmas de programação orientada a objetos.
Coordenação e Colaboração
A coordenação e colaboração em sistemas distribuídos envolvem a gestão de recursos e a sincronização de atividades entre processos:
Sincronização:
Relógios Lógicos e Físicos: Utilizados para coordenar ações em sistemas distribuídos, garantindo ordenação de eventos. Exemplos incluem relógios de Lamport e vetores de relógio.
Mutex Distribuído: Algoritmos para garantir exclusão mútua em sistemas distribuídos, como o algoritmo de Ricart-Agrawala.
Cooperação entre Processos:
Semáforos e Monitores Distribuídos: mecanismos de sincronização que permitem que processos colaborem de forma segura, evitando condições de corrida.
Barreiras de Sincronização: Utilizadas para sincronizar a execução de um grupo de processos, garantindo que todos alcancem um certo ponto antes de prosseguir.


Coordenação através de Espaços de Tuplas:
Modelo de Linda: Utiliza um espaço de tuplas como uma memória associativa compartilhada, onde processos podem adicionar, ler e retirar tuplas. Facilita a coordenação e troca de informações de forma desacoplada.
Consistência e Replicação:
Modelos de Consistência: Diferentes modelos (forte, eventual, causal) para garantir que todos os processos vejam um estado consistente dos dados distribuídos.
Protocolos de Replicação: Técnicas como quorum e consenso (Paxos, Raft) são usadas para garantir que réplicas de dados em diferentes máquinas permaneçam consistentes.

Comunicação Síncrona e Assíncrona
Comunicação Síncrona:
Definição: Na comunicação síncrona, o envio e o recebimento de mensagens são operações bloqueantes. O remetente envia uma mensagem e fica bloqueado até que o destinatário receba e processe a mensagem.
Vantagens:
Simplicidade: Fácil de entender e implementar, pois o fluxo de controle é direto.
Sincronização Natural: Garante que o remetente saiba quando a mensagem foi recebida.
Desvantagens:
Eficiência: Pode ser ineficiente, pois o remetente precisa esperar a confirmação de recebimento.
Escalabilidade: Pode não escalar bem em sistemas com alta latência de rede ou onde processos têm tempos de resposta variáveis.
Comunicação Assíncrona:
Definição: Na comunicação assíncrona, o envio de mensagens é uma operação não bloqueante. O remetente envia a mensagem e continua sua execução sem esperar pela confirmação de recebimento. O destinatário processa a mensagem quando estiver pronto.
Vantagens:
Desempenho: Melhor desempenho, pois o remetente não precisa esperar, podendo realizar outras tarefas.
Escalabilidade: Escala melhor em ambientes com alta latência e onde processos podem ter tempos de resposta variáveis.
Desvantagens:
Complexidade: Mais complexa de implementar, pois requer mecanismos adicionais para confirmação de recebimento e gerenciamento de mensagens perdidas.
Sincronização: Requer técnicas adicionais para sincronizar o estado entre remetente e destinatário.
Técnicas de Serialização e Desserialização de Dados
Para que a passagem de mensagens funcione de forma eficiente, especialmente em sistemas heterogêneos onde processos podem ser executados em diferentes arquiteturas e plataformas, os dados precisam ser convertidos em um formato que possa ser transmitido pela rede. Esse processo envolve serialização e desserialização.
Serialização:
Definição: Serialização é o processo de converter uma estrutura de dados ou objeto em um formato que pode ser facilmente armazenado ou transmitido, como uma sequência de bytes.
Objetivo: Garantir que os dados possam ser enviados através de uma rede ou armazenados em um meio de armazenamento persistente.
Formatos Comuns:
JSON, XML, Protobuf, Avro
Desserialização:
Definição: Desserialização é o processo inverso da serialização, onde os dados serializados são convertidos de volta à sua estrutura original.
Objetivo: Reconstruir os dados na forma original para serem utilizados pelo programa receptor.













Capítulo Comunicação Remota

RPC (Remote Procedure Call)
Definição: RPC é um protocolo que permite que um programa execute um procedimento (sub-rotina) em outra máquina sem que o programador precise codificar explicitamente os detalhes da comunicação de rede.
Funcionamento:
Chamador (Client): Inicia a chamada de procedimento remoto, que é capturada por uma biblioteca local de RPC.
Stub Cliente: Converte a chamada e os parâmetros para um formato padronizado e envia a solicitação para o servidor.
Transporte: A solicitação é enviada através da rede para o servidor.
Stub Servidor: Recebe a solicitação, desserializa os parâmetros e invoca o procedimento apropriado no servidor.
Servidor: Executa o procedimento e retorna o resultado ao stub servidor.
Stub Servidor: Serializa o resultado e envia de volta para o cliente.
Stub Cliente: Recebe o resultado, desserializa e entrega ao chamador original.
Vantagens:
Transparência: Programadores podem invocar procedimentos remotos como se fossem locais.
Abstração: Esconde a complexidade da comunicação de rede.
Desvantagens:
Latência: Pode introduzir latência devido à comunicação de rede.
Falhas: Tratamento de falhas é mais complexo (falhas de rede, servidor indisponível).

Invocação de Métodos Remotos (RMI)
Definição: RMI é uma extensão do conceito de RPC, aplicada a programação orientada a objetos, onde métodos de objetos podem ser invocados remotamente.
Funcionamento:
Objeto Remoto: Um objeto cujos métodos podem ser invocados de outra máquina.
Registro de Objetos: Objetos remotos são registrados em um serviço de diretório para serem localizados por clientes.
Stub Cliente: Representa o objeto remoto no cliente, gerenciando a comunicação.
Skeleton Servidor: No servidor, o skeleton desserializa as solicitações e invoca os métodos no objeto real.
Transporte: Comunicação entre stubs e skeletons através da rede.
Vantagens:
Abstração Orientada a Objetos: Facilita o desenvolvimento em linguagens orientadas a objetos.
Transparência de Localização: Objetos remotos são utilizados como se estivessem no mesmo espaço de memória.
Desvantagens:
Desempenho: Similar aos RPCs, pode introduzir latência.
Complexidade: Requer a definição e gerenciamento de objetos remotos e seus stubs.

Objetos Distribuídos
Definição: Objetos distribuídos são objetos que existem em diferentes espaços de endereçamento de memória e podem se comunicar através da rede. RMI é uma implementação específica desse conceito.
Funcionamento:
Transparência de Acesso: Clientes acessam objetos remotos como se fossem locais.
Transparência de Localização: Clientes não precisam saber a localização física dos objetos remotos.
Transparência de Mobilidade: Objetos podem se mover entre diferentes locais sem afetar o cliente.
Transparência de Concurrency: Vários clientes podem acessar simultaneamente um objeto distribuído.
Exemplos:
CORBA (Common Object Request Broker Architecture): Permite que objetos distribuídos escritos em diferentes linguagens de programação interajam.
DCOM (Distributed Component Object Model): Microsoft, similar ao CORBA, permite a comunicação entre componentes distribuídos.
Vantagens:
Modularidade: Facilita o desenvolvimento modular e reutilização de componentes.
Interoperabilidade: Suporta interação entre diferentes plataformas e linguagens de programação.
Desvantagens:
Desempenho: Comunicação entre objetos distribuídos pode ser mais lenta devido à sobrecarga de rede.
Complexidade de Implementação: Requer gestão cuidadosa de referências remotas e manipulação de falhas.
























Capítulo Middleware de Comunicação
Middleware de Passagem de Mensagens
Definição: Middleware de passagem de mensagens facilita a comunicação entre processos através do envio e recebimento de mensagens. Ele abstrai a complexidade das operações de rede, proporcionando uma interface mais simples para os desenvolvedores.

Características:
Modelo de Comunicação: Baseado na troca explícita de mensagens entre processos.
Desacoplamento: Os processos são desacoplados no tempo (não precisam estar ativos ao mesmo tempo) e no espaço (não precisam conhecer as localizações uns dos outros).
Vantagens:
Escalabilidade: Facilita a escalabilidade horizontal, permitindo adicionar mais consumidores para processar mensagens em paralelo.
Resiliência: Melhora a resiliência ao desacoplar produtores e consumidores, permitindo que cada um opere independentemente.
Desvantagens:
Complexidade: Requer a gestão de filas e tópicos, além de lidar com a entrega garantida e ordem de mensagens.
Latência: Pode introduzir latência devido ao armazenamento intermediário das mensagens.

Middleware Orientado a Objeto
Definição: Middleware orientado a objeto facilita a comunicação entre objetos distribuídos, permitindo que métodos em objetos remotos sejam invocados como se fossem locais.
Características:
Abstração Orientada a Objetos: Utiliza conceitos de programação orientada a objetos para modelar a comunicação.
Transparência: Esconde a complexidade da rede, permitindo que objetos interajam de forma transparente.
Vantagens:
Natural para Programadores OO: Integra-se bem com linguagens e paradigmas orientados a objetos.
Interoperabilidade: Permite a comunicação entre diferentes plataformas e linguagens.
Desvantagens:
Desempenho: A sobrecarga de invocação remota pode ser significativa.
Complexidade de Gestão: Requer a gestão de objetos remotos e suas referências.

Middleware Baseado em Serviços
Definição: Middleware baseado em serviços facilita a comunicação entre serviços independentes, normalmente através de APIs bem definidas. É a base para arquiteturas de micro serviços e SOA (Service-Oriented Architecture).
Características:
Desacoplamento de Serviços: Cada serviço é independente e se comunica com outros serviços através de interfaces bem definidas.
Interoperabilidade: Utiliza padrões abertos (HTTP, JSON, XML) para permitir a comunicação entre serviços desenvolvidos em diferentes tecnologias.
Vantagens:
Flexibilidade: Serviços podem ser desenvolvidos, implantados e escalados independentemente.
Reutilização e Composição: Serviços podem ser reutilizados em diferentes aplicações e compostos para criar funcionalidades mais complexas.
Desvantagens:
Latência e Desempenho: Chamadas de serviço podem introduzir latência devido à comunicação de rede.
Gestão de Serviços: Requer mecanismos para descoberta, monitoramento e gerenciamento de serviços.

Capítulo Protocolos de Comunicação

TCP/IP (Transmission Control Protocol/Internet Protocol)

Definição: TCP/IP é a principal suite de protocolos utilizada na internet e em redes privadas. Ele define como os dados devem ser formatados, endereçados, transmitidos, roteados e recebidos nos pontos de destino.

Características:
TCP (Transmission Control Protocol):
Confiabilidade: Garante a entrega ordenada e sem erros de um fluxo de bytes entre aplicações que se comunicam.
Controle de Fluxo e Congestionamento: Gerencia a taxa de transmissão de dados para evitar congestionamento da rede.
Estabelecimento de Conexão: Utiliza um processo de handshake de três vias para estabelecer uma conexão confiável antes de transmitir dados.
IP (Internet Protocol):
Endereçamento: Define como os dispositivos são endereçados e identificados na rede (endereços IP).
Roteamento: Determina como os pacotes são roteados através de várias redes até alcançarem seu destino.
UDP (User Datagram Protocol)
Definição: UDP é um protocolo de comunicação simples e sem conexão que permite a troca de mensagens (datagramas) entre dispositivos em uma rede.
Características:
Sem Conexão: Não estabelece uma conexão antes de enviar dados.
Baixa Latência: Ideal para aplicações que requerem baixa latência e podem tolerar alguma perda de dados.
Sem Garantia de Entrega: Não garante a entrega dos pacotes, nem a ordem correta.
HTTP (Hypertext Transfer Protocol)
Definição: HTTP é um protocolo de aplicação para sistemas de informação distribuídos, colaborativos e hipermídia. É a base da comunicação de dados para a World Wide Web.
Características:
Protocolo Stateless: Cada requisição HTTP é independente, sem a necessidade de manter estado entre as requisições.
Métodos de Requisição: Define métodos como GET, POST, PUT, DELETE, etc., que especificam a ação desejada em um recurso.
Mensagens: As mensagens HTTP consistem de um cabeçalho e um corpo opcional contendo os dados.

FTP (File Transfer Protocol)
Definição: FTP é um protocolo padrão de rede utilizado para a transferência de arquivos entre um cliente e um servidor em uma rede de computadores.
Características:
Autenticação: Suporta autenticação de usuário por meio de um nome de usuário e senha.
Modo Ativo e Passivo: Define modos de operação que determinam como a conexão de dados é estabelecida entre cliente e servidor.
Transferência de Arquivos: Permite comandos para upload, download, renomear, deletar e listar arquivos no servidor.

SMTP (Simple Mail Transfer Protocol)
Definição: SMTP é um protocolo de comunicação para a transmissão de e-mails entre servidores de e-mail.
Características:
Envio de E-mails: Responsável pelo envio de e-mails de um cliente para um servidor de e-mail ou entre servidores de e-mail.
Conexão Simples: Utiliza uma conexão simples baseada em texto para enviar comandos e transferir mensagens.
Relé de E-mails: Permite que e-mails sejam encaminhados de um servidor para outro até alcançar o destinatário final.





Capítulo Padrões de Projeto e Implementação

Padrão Cliente-Servidor
Definição: O padrão Cliente-Servidor é uma arquitetura de rede onde múltiplos clientes se conectam a um servidor centralizado para acessar recursos ou serviços.
Características:
Cliente: É a entidade que solicita serviços ou recursos. Pode ser um programa de usuário, como um navegador web ou um cliente de e-mail.
Servidor: É a entidade que fornece serviços ou recursos. Pode ser um servidor web, servidor de banco de dados, servidor de e-mail, etc.
Comunicação: A comunicação entre cliente e servidor geralmente ocorre através de uma rede usando protocolos como HTTP, FTP, ou SMTP.
Funcionamento:
O cliente envia uma solicitação para o servidor.
O servidor processa a solicitação.
O servidor envia uma resposta de volta para o cliente.
Vantagens:
Centralização: Facilita a gestão, manutenção e segurança dos dados e serviços.
Escalabilidade: Servidores podem ser dimensionados para suportar um grande número de clientes.
Desvantagens:
Ponto Único de Falha: Se o servidor falhar, todos os clientes ficam sem acesso ao serviço.
Desempenho: O desempenho pode ser um problema se muitos clientes acessarem o servidor simultaneamente.





Padrão Publicador-Subscritor
Definição: O padrão Publicador-Subscritor (também conhecido como Publish-Subscribe ou Pub-Sub) é uma arquitetura de mensagens onde remetentes de mensagens (publicadores) não enviam mensagens diretamente para destinatários específicos (subscritores), mas para um sistema intermediário que as distribui.
Características:
Publicadores: Entidades que geram e enviam mensagens sobre determinados tópicos ou eventos.
Subscritores: Entidades que expressam interesse em um ou mais tópicos ou eventos e recebem mensagens relevantes.
Broker: Sistema intermediário que gerencia as assinaturas e entrega as mensagens aos subscritores.
Funcionamento:
O publicador envia uma mensagem para um tópico no broker.
O broker encaminha a mensagem para todos os subscritores desse tópico.
Vantagens:
Desacoplamento: Publicadores e subscritores são desacoplados no tempo (não precisam estar ativos simultaneamente) e no espaço (não precisam saber da existência um do outro).
Escalabilidade: Facilita a adição de novos publicadores e subscritores sem alterar o sistema existente.
Desvantagens:
Complexidade de Gestão: Requer gestão do broker e dos tópicos.
Latência: Pode introduzir latência devido ao processamento intermediário pelo broker.






Padrão Modelo-Vista-Controlador (MVC)
Definição: O padrão Modelo-Vista-Controlador (MVC) é uma arquitetura de software que separa a aplicação em três componentes principais: o modelo, a vista e o controlador.
Componentes:
Modelo: Representa os dados e a lógica de negócio da aplicação. É responsável por acessar a base de dados e realizar operações de manipulação dos dados.
Vista: Representa a interface do usuário. É responsável por apresentar os dados ao usuário e capturar a entrada do usuário.
Controlador: Interpreta a entrada do usuário e a converte em chamadas para o modelo ou para a vista. Atua como um intermediário entre a vista e o modelo.
Funcionamento:
O usuário interage com a vista (por exemplo, clicando em um botão).
O controlador captura essa interação e decide o que fazer em resposta (por exemplo, solicitar dados do modelo).
O controlador chama o modelo para realizar uma operação ou recuperar dados.
O modelo executa a operação e retorna os dados ao controlador.
O controlador atualiza a vista com os novos dados.
Vantagens:
Separação de Preocupações: Facilita a manutenção e evolução da aplicação, pois separa a lógica de negócio da interface do usuário.
Reutilização de Componentes: Componentes do modelo, vista e controlador podem ser reutilizados em diferentes partes da aplicação ou em diferentes projetos.
Desvantagens:
Complexidade Inicial: Pode introduzir complexidade adicional no início do desenvolvimento, pois requer uma boa compreensão da separação entre os componentes.
Sobrecarregamento do Controlador: O controlador pode se tornar um gargalo se tiver muitas responsabilidades.



Capítulo Desafios e Considerações de Desempenho

Latência
Definição: Latência é o tempo total que um dado leva para viajar de um ponto a outro em uma rede. É um dos principais fatores que afetam o desempenho percebido pelos usuários em sistemas distribuídos.
Largura de Banda
Definição: Largura de banda refere-se à quantidade máxima de dados que pode ser transmitida através de um meio de comunicação em um determinado período de tempo, geralmente medida em bits por segundo (bps).
Escalabilidade
Definição: Escalabilidade é a capacidade de um sistema distribuído de crescer e gerenciar um aumento na carga de trabalho sem comprometer significativamente o desempenho.

